<project basedir="." default="default" name="Textmate to Sublime Transformer">
	
	<target name="default">
		<tm2subl textmate-src="TextMate" sublime-out="Sublime Text" snippet-transform-file="tm2subl.xsl" convert-to-tabs="true" />
	</target>
	
	
	
	<macrodef name="tm2subl" description="This converts one (1) TextMate Bundle into one (1) Sublime Text Package.">
		<attribute name="textmate-src"                   description="The root folder for the TextMate Bundle, usually ending in '*.tmbundle'." />
		<attribute name="sublime-out"                    description="The root folder to put the Sublime Text files." />
		<attribute name="snippet-transform-file"         description="The file that transforms the snippets." />
		<attribute name="convert-to-tabs" default="true" description="Setting for changing the spaces to tabs in the resulting snippet xml. (default: true)" />
		<!--Maybe one day support multiple tm bundles? <element   name="srcfiles"       implicit="true" description="" />-->
		
		<sequential>
			<!-- clean -->
			<delete dir="@{sublime-out}" />
			
			<!-- mkdir -->
			<mkdir dir="@{sublime-out}" />
			
			<!-- copy non-snippets -->
			<copy todir="@{sublime-out}" flatten="true" includeEmptyDirs="false">
				<fileset dir="@{textmate-src}" >
					<exclude name="**/*.plist" />
					<exclude name="**/*.tmSnippet" />
				</fileset>
			</copy>
			
			<!-- copy & transform snippets -->
			<xslt basedir="@{textmate-src}" destdir="@{sublime-out}" style="@{snippet-transform-file}">
				<!-- flatten & change extension -->
				<chainedmapper>
					<flattenmapper/>
					<globmapper from="*.tmSnippet" to="*.sublime-snippet" />
				</chainedmapper>
			</xslt>
			
			
			<!-- below is the convert-to-tabs setting execution -->
			
			<!-- Read the file & find out how many spaces are at the beginning of the lines. -->
			<local name="quantity" />
			<loadfile property="quantity" srcfile="@{snippet-transform-file}">
				<!-- get the number of spaces the transformer is set to create -->
				<filterchain>
					<!-- get only the line containing the indent-amount setting -->
					<linecontainsregexp>
						<regexp pattern="xalan:indent-amount=&#34;(\d+)&#34;" />
					</linecontainsregexp>
					
					<!-- replace entire line (.* - .*) with just the digit (\d+) -->
					<tokenfilter>
						<replaceregex pattern=".*xalan:indent-amount=&#34;(\d+)&#34;.*" replace='\1' />
					</tokenfilter>
					
					<!-- guarantee that the only data left is the digits -->
					<striplinebreaks />
				</filterchain>
			</loadfile>
			
			<!-- Guarantee a value in quantity (0 is don't execute)-->
			<property name="quantity" value="0" />
			
			
<!-- srbs style if hack starts here -->
			
			<!-- Here we declare a property to be local so we can set it's value (and to not interfere anywhere else) -->
			<local name="convert" />
			
			<!-- Here we set the value of ${convert} to be 'true' ONLY when the user DOESN'T want to replace the values -->
			<condition property="convert">
				<not><!-- This only negates the below to follow the above rule -->
					<and>
						<!-- ONLY true/t values are accepted as true -->
						<or>
							<equals arg1="true" arg2="@{convert-to-tabs}" casesensitive="false" trim="true" forcestring="true" />
							<equals arg1="t"    arg2="@{convert-to-tabs}" casesensitive="false" trim="true" forcestring="true" />
						</or>
						
						<!-- Check to make sure there actually is a non-zero quantity in the file -->
						<not>
							<equals arg1="0" arg2="${quantity}" />
						</not>
					</and>
				</not>
				
				<!--convert = (convert-to-tabs==true && (quantity > 0))? "": "true"-->
			</condition>
			
			<!-- Otherwise, we set the value to an empty string
			     So that when it is expanded, it comes out '' instead of '${convert}' -->
			<property name="convert" value="" />
			
			<!-- The ${convert} variable is used in a following regular expression in a location that will guarantee failure
			     when/if text is inserted there -->
			
			<!--<echo message="Check for existance for non-true & non-existance for true: -${convert}-" />-->
			
			<!-- The only downfall of not using targets/depends or ant-contib if is that the
			     loadfile & replaceregexp tasks have to executed no matter what. -->
			     
<!-- srbs style if hack ends here -->
			
			
			<!-- Replace the spaces with tabs. -->
			<replaceregexp match="${convert}^ &#123;${quantity}&#125;&lt;" replace="&#09;&lt;" byline="true">
				<fileset dir="@{sublime-out}" includes="*.sublime-snippet" />
			</replaceregexp>
		</sequential>
	</macrodef>
</project>