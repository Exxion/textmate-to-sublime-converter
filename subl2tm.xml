<!-- (C) 2012 David "srbs" Forrest, ZLIB license -->
<!-- somerandombystander (at) gmail (dot) com -->
<!-- http://www.opensource.org/licenses/zlib-license.php -->
<project basedir="." name="Sublime to TextMate Transformer">
<!-- if you want to change the projectname, you need to change it on line 73 also -->
	
	<macrodef name="subl2tm" description="This converts one (1) Sublime Text Package into one (1) TextMate Bundle.">
		<attribute name="destdir"                                   description="The root folder to put the TextMate Bundle files, usually ending in '*.tmbundle'." />
		<attribute name="srcdir"                                    description="The root folder for the Sublime Text files." />
		<attribute name="snippet-transformer" default="subl2tm.xsl" description="The file that transforms the snippets. (default: subl2tm.xsl)" />
		<attribute name="convert-to-tabs"     default="false"       description="Setting for changing the spaces to tabs in the resulting snippet xml. (default: false)" />
		<!-- no package here, its a dir-folder -->
		
		<sequential>
			<!-- clean -->
			<delete dir="@{destdir}" />
			
			<!-- mkdir -->
			<mkdir dir="@{destdir}" />
			
			<!-- copy non-snippets -->
			<copy todir="@{destdir}/Preferences" flatten="true" includeEmptyDirs="false">
				<fileset dir="@{srcdir}" includes="**/*.tmPreferences" />
			</copy>
			<copy todir="@{destdir}/Syntaxes" flatten="true" includeEmptyDirs="false">
				<fileset dir="@{srcdir}" includes="**/*.tmLanguage" />
			</copy>
			<!-- create info.plist?? -->
			
			<!-- transform & copy all snippets -->
			<subl2tm-snippet destdir="@{destdir}/Snippets" transformer="@{snippet-transformer}" flatten="true" convert-to-tabs="@{convert-to-tabs}">
				<fileset dir="@{srcdir}" includes="**/*.sublime-snippet" />
			</subl2tm-snippet>
		</sequential>
	</macrodef>
	
	<macrodef name="subl2tm-snippet" description="This converts Sublime Text snippets into TextMate snippets">
		<attribute name="destdir"                               description="The destination directory the TextMate snippets go in." />
		<attribute name="transformer"     default="subl2tm.xsl" description="The XSLT file that transforms the snippet. (default: subl2tm.xsl)" />
		<attribute name="convert-to-tabs" default="false"       description="Setting for converting the spaces in the snippet xml to tabs. (default: false)" />
		<attribute name="force"           default="false"       description="Recreate target files regardless on if they are newer than their source file. (default: false)" />
		<attribute name="flatten"         default="true"        description="Flatten the hierarchy. (default: true)" />
		<attribute name="scandirs"        default="false"       description="Transform all files in included directories. (default: false)" />
		<!-- for nested fileset's -->
		<element   name="files"          implicit="yes"         description="A list of Sublime Text snippet files to convert." />
		
		<sequential>
			<!-- time stuff used to only apply the convert-to-tabs setting to newly created files -->
			<local name="timepattern" />
			<property name="timepattern" value="yyyy/MM/dd HH:mm:ss" />
			<local name="time" />
			<tstamp>
				<format property="time" pattern="${timepattern}" offset="-1" unit="second" />
				<!-- -1 second offset to guarantee that the generated files are included -->
			</tstamp>
			
			
			<!-- verify dir exists -->
			<mkdir dir="@{destdir}" />
			
			
			<!-- xslt transform settings -->
			<local name="maptype" />
			<!-- if user wanted flatten, use flatten below, other qise, do nothing (aka identity) -->
			<condition property="maptype" value="flatten" else="identity">
				<istrue value="@{flatten}" />
			</condition>
			
			<!-- verify xslt file exists, if not.. check for default, if that one doesn't exist,
			     keep the original file to show a proper error message
			      
			     generally this will only work for the default value, but is done non-the-less -->
			<local name="ant-file-dir" />
			<dirname property="ant-file-dir" file="${ant.file.Sublime to TextMate Transformer}" />
			
			<local name="xsl-default" />
			<property name="xsl-default" value="${ant-file-dir}/@{transformer}" />
			
			<local name="xsl-file" />
			<condition property="xsl-file" value="${xsl-default}" else="@{transformer}">
				<and>
					<not>
						<available file="@{transformer}" />
					</not>
					<available file="${xsl-default}" />
				</and>
				<!-- xsl-file = (!transformer.exists() && xsl-default.exists())? xsl-default: transformer -->
			</condition>
			
			
			<!-- copy & transform snippets -->
			<xslt destdir="@{destdir}" style="${xsl-file}" force="@{force}"
			        useImplicitFileset="false" scanincludedirectories="@{scandirs}">
				<files />
				<!-- flatten & change extension -->
				<chainedmapper>
					<mapper type="${maptype}" />
					<globmapper from="*.sublime-snippet" to="*.tmSnippet" />
				</chainedmapper>
			</xslt>
			
			
			<!-- below is the convert-to-tabs setting execution -->
			
			<!-- Read the file & find out how many spaces are at the beginning of the lines. -->
			<local name="quantity" />
			<loadfile property="quantity" srcfile="${xsl-file}">
				<!-- get the number of spaces the transformer(xsl-file) is set to create -->
				<filterchain>
					<!-- get only the line containing the indent-amount setting -->
					<linecontainsregexp>
						<regexp pattern="xalan:indent-amount=&#34;(\d+)&#34;" />
					</linecontainsregexp>
					
					<!-- replace entire line (.* - .*) with just the digit (\d+) -->
					<tokenfilter>
						<replaceregex pattern=".*xalan:indent-amount=&#34;(\d+)&#34;.*" replace='\1' />
					</tokenfilter>
					
					<!-- guarantee that the only data left is the digits -->
					<striplinebreaks />
				</filterchain>
			</loadfile>
			
			<!-- Guarantee a value in quantity (0 is don't execute)-->
			<property name="quantity" value="0" />
			
			
			<!-- srbs style if hack starts here -->
			
			<!-- Here we declare a property to be local so we can set it's value (and to not interfere anywhere else) -->
			<local name="convert" />
			
			<!-- Here we set the value of ${convert} to be '' when the user wants to replace the values -->
			<!-- Otherwise (else) set it to 'fail' do not replace the values -->
			<condition property="convert" value="" else="fail">
					<and>
						<!-- ONLY true/t values are accepted as true -->
						<or>
							<equals arg1="true" arg2="@{convert-to-tabs}" casesensitive="false" trim="true" forcestring="true" />
							<equals arg1="t"    arg2="@{convert-to-tabs}" casesensitive="false" trim="true" forcestring="true" />
						</or>
						
						<!-- Check to make sure there actually is a non-zero quantity in the file -->
						<not>
							<equals arg1="0" arg2="${quantity}" />
						</not>
					</and>
				
				<!--convert = (convert-to-tabs==true && (quantity > 0))? "": "fail"-->
			</condition>
			
			<!-- The ${convert} variable is used in a following regular expression in a location that will guarantee failure
			     when/if text is inserted there -->
			
			<!-- The only downfall of not using targets/depends or ant-contib if is that the
			     loadfile & replaceregexp tasks have to executed no matter what. -->
			
			<!--<echo message="Check for existance for non-true & non-existance for true: -${convert}-" />-->     
			
			
			<!-- Replace the spaces with tabs. -->
			<!-- <dict> are on column 1 -->
			<replaceregexp match="${convert}^ &#123;${quantity}&#125;&lt;" replace="&lt;" byline="true">
				<fileset dir="@{destdir}" includes="*.tmSnippet">
					<!-- only the files we recently changed -->
					<date datetime="${time}" when="after" pattern="${timepattern}" />
				</fileset>
			</replaceregexp>
			<!-- <key> & <string> are on column 2 (1 tab) -->
			<replaceregexp match="${convert}^ &#123;${quantity}&#125; &#123;${quantity}&#125;&lt;" replace="&#09;&lt;" byline="true">
				<fileset dir="@{destdir}" includes="*.tmSnippet">
					<!-- only the files we recently changed -->
					<date datetime="${time}" when="after" pattern="${timepattern}" />
				</fileset>
			</replaceregexp>
		</sequential>
	</macrodef>
	
	
	<!-- future idea instead of what is in the xsl file?
	<scriptdef name="generateuuid" language="javascript">
		<attribute name="property" />
		<![CDATA[
			importClass(java.util.UUID);

			project.setProperty(attributes.get( "property"), UUID.randomUUID().toUpperCase());
		]]>
	</scriptdef>
	-->
</project>
